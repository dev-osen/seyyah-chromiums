// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/blink/public/mojom/tokens/tokens.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";
import "url/mojom/origin.mojom";
import "url/mojom/url.mojom";

// This is a mojom representation of the corresponding AnnotatedPageContent
// proto.
// See components/optimization_guide/proto/features/common_quality_data.proto
// for details.
//
// Note: The proto representation needs to remain backwards compatible with
// older client versions but there's no such limitation on the mojom
// representation.

enum AIPageContentAttributeType {
  kRoot,
  kIframe,
  kContainer,

  // Text chunks.
  kParagraph,
  kHeading,
  kAnchor,

  // Structured chunks.
  kOrderedList,
  kUnorderedList,
  kForm,
  kFigure,
  kTable,
  kTableCell,

  // Landmark/section chunks.
  kHeader,
  kNav,
  kSearch,
  kMain,
  kArticle,
  kSection,
  kAside,
  kFooter,
};

struct AIPageContentGeometry {
  // The bounding box of the content node, in the page coordinate system.
  gfx.mojom.Rect outer_bounding_box;

  // Subset of this node visible on the page. Empty if offscreen.
  gfx.mojom.Rect visible_bounding_box;

  // Whether the content node is fixed or sticky position. This may suggest
  // that the node is a header, footer, or sidebar.
  bool is_fixed_or_sticky_position;

  // Whether the content node can scroll in the x direction.
  bool scrolls_overflow_x;

  // Whether the content node can scroll in the y direction.
  bool scrolls_overflow_y;
};

enum AIPageContentTextSize {
  kXS,
  kS,
  kM,
  kL,
  kXL,
};

struct AIPageContentTextStyle {
  AIPageContentTextSize text_size;
  bool has_emphasis;
};

struct AIPageContentTextInfo {
  string text_content;
  gfx.mojom.Rect text_bounding_box;
  AIPageContentTextStyle text_style;
};

enum AIPageContentAnchorRel {
  kRelationUnknown,
  kRelationNoReferrer,
  kRelationNoOpener,
  kRelationOpener,
  kRelationPrivacyPolicy,
  kRelationTermsOfService,
};

struct AIPageContentAnchorData {
  url.mojom.Url url;

  // The relationship between the linked URL and the current document.
  array<AIPageContentAnchorRel> rel;

  // TODO(crbug.com/382119737): Consider adding fields for target, MIME type,
  // and whether the link is a download.
};

struct AIPageContentImageInfo {
  gfx.mojom.Rect image_bounding_box;
  string? image_caption;

  // Provides the origin for this image if there is a resource currently being
  // rendered. For example, an image element whose resource is not available
  // will be empty.
  url.mojom.Origin? source_origin;
};

// Provides metadata for frames (local and remote) accessible from the
// LocalFrameRoot of the corresponding AIPageContentAgent.
struct AIPageContentIframeData {
  blink.mojom.FrameToken frame_token;

  // Indicates whether the iframe is likely to be an ad frame. This is set for
  // both the root ad frame and its descendants.
  bool likely_ad_frame;
};

struct AIPageContentTableRow {
  array<AIPageContentNode> cells;
};

struct AIPageContentTableData {
  // The name of the table, coming from the caption.
  string? table_name;

  array<AIPageContentTableRow> header_rows;
  array<AIPageContentTableRow> body_rows;
  array<AIPageContentTableRow> footer_rows;
};

struct AIPageContentAttributes {
  // The IDs of the DOM nodes whose content is represented by this ContentNode.
  array<int32> dom_node_ids;

  // If this content node represents an entire subtree, this is the ID of the
  // common ancestor of all the nodes in the subtree.
  int32? common_ancestor_dom_node_id;

  AIPageContentAttributeType attribute_type;

  // Geometry of the common_ancestor_dom_node_id.
  AIPageContentGeometry? geometry;

  // Text chunks in this node.
  array<AIPageContentTextInfo> text_info;

  // Only set if attribute_type is ANCHOR.
  AIPageContentAnchorData? anchor_data;

  // Images in this node.
  array<AIPageContentImageInfo> image_info;

  // This should only be set if AIPageContentAttributeType is kIframe.
  AIPageContentIframeData? iframe_data;

  // TODO(crbug.com/380493777): Add FormData if attribute_type is FORM.

  // Only set if attribute_type is TABLE.
  AIPageContentTableData? table_data;
};

// A semantic chunk of information on a page. It can represent text, structured
// content, or containers for other ContentNodes.
struct AIPageContentNode {
  array<AIPageContentNode> children_nodes;
  AIPageContentAttributes content_attributes;
};

// Represents the parsed content of a page.
struct AIPageContent {
  AIPageContentNode root_node;
};


// Used to obtain the AIPageContent representation for Documents. Lives in the
// renderer process and called by the browser process to pull data for a
// Document.
// The interface is only available for the outermost main frame.
interface AIPageContentAgent {
  // Provides the AIPageContent representation for this LocalFrame and all
  // LocalFrames accessible from the LocalFrameRoot.
  GetAIPageContent() => (AIPageContent page_content);
};
